# Метод insert() позволяет вставлять значение в список в заданной позиции. В него передается два аргумента:
# 1. index: индекс, задающий место вставки значения;
# 2. value: значение, которое требуется вставить.
names = ['Gvido', 'Roman' , 'Timur']
print(names)  # ['Gvido', 'Roman' , 'Timur']
names.insert(0, 'Anders')
print(names)  # ['Anders', 'Gvido', 'Roman' , 'Timur']
names.insert(3, 'Josef')
print(names)  # ['Anders', 'Gvido', 'Roman' , 'Josef', 'Timur']

# Если указан недопустимый индекс, то во время выполнения программы не происходит ошибки. Если задан индекс за пределами
# конца списка, то значение будет добавлено в конец списка. Если применен отрицательный индекс, который указывает
# на недопустимую позицию, то значение будет вставлено в начало списка.

# Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению.
# Таким образом, в метод передается один параметр:
# 1. value: значение, индекс которого требуется найти.
# Если элемент в списке не найден, то во время выполнения происходит ошибка.
names = ['Gvido', 'Roman', 'Timur']
position = names.index('Timur')
print(position)  # 2

# Чтобы избежать таких ошибок, можно использовать метод index() вместе с оператором принадлежности in:
names = ['Gvido', 'Roman', 'Timur']
if 'Anders' in names:
    position = names.index('Anders')
    print(position)
else:
    print('Такого значения нет в списке')

# Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению.
# В метод передается один параметр:
# 1. value: значение, которое требуется удалить.
# Метод уменьшает размер списка на один элемент. Все элементы после удаленного элемента смещаются на одну позицию к
# началу списка. Если элемент в списке не найден, то во время выполнения происходит ошибка.
food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
print(food)  # ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
food.remove('Рис')
print(food)  # ['Курица', 'Рыба', 'Брокколи', 'Рис']

# Метод pop() удаляет элемент по указанному индексу и возвращает его.
# В метод pop() передается один необязательный аргумент:
# 1. index: индекс элемента, который требуется удалить.
# Если индекс не указан, то метод удаляет и возвращает последний элемент списка. Если список пуст или указан индекс за
# пределами диапазона, то во время выполнения происходит ошибка.
names = ['Gvido', 'Roman', 'Timur']
item = names.pop(1)
print(item)   # Roman
print(names)  # ['Gvido', 'Timur']

# Метод count() возвращает количество элементов в списке, значения которых равны переданному в метод значению.
# метод передается один параметр:
# 1. value: значение, количество элементов, равных которому,  нужно посчитать.
# Если значение в списке не найдено, то метод возвращает 0.
names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']
cnt1 = names.count('Timur')
cnt2 = names.count('Gvido')
cnt3 = names.count('Josef')
print(cnt1)  # 3
print(cnt2)  # 1
print(cnt3)  # 0

# Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный.
names = ['Gvido', 'Roman' , 'Timur']
names.reverse()
print(names)  # ['Timur', 'Roman', 'Gvido']

# Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1].
# Метод reverse() меняет порядок элементов на обратный в текущем списке, а срез создает копию списка, в котором элементы
# следуют в обратном порядке.

# Метод clear() удаляет все элементы из списка.
names = ['Gvido', 'Roman' , 'Timur']
names.clear()
print(names)  # []

# Метод copy() создает поверхностную копию списка.
names = ['Gvido', 'Roman' , 'Timur']
names_copy = names.copy()  # создаем поверхностную копию списка names
print(names)       # ['Gvido', 'Roman', 'Timur']
print(names_copy)  # ['Gvido', 'Roman', 'Timur']

# Аналогичного результата можно достичь с помощью срезов или функции list():
names = ['Gvido', 'Roman' , 'Timur']
names_copy1 = list(names)  # создаем поверхностную копию с помощью функции list()
names_copy2 = names[:]     # создаем поверхностную копию с помощью среза от начала до конца

# Примечание. Существует большая разница в работе строковых и списочных методов. Строковые методы не изменяют
# содержимого объекта к которому они применяются, а возвращают новое значение. Списочные методы, напротив, меняют
# содержимое объекта к которому применяются.

# В Python списки имеют встроенный метод sort(), который сортирует элементы списка по возрастанию или убыванию.
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort()
print('Отсортированный список:', a)  # [-67, -3, -2, 0, 1, 6, 7, 8, 9, 12, 34, 45, 99, 1000]

# По умолчанию метод sort() сортирует список по возрастанию. Если требуется отсортировать список по убыванию,
# необходимо явно указать параметр reverse = True
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort(reverse = True)               # сортируем по убыванию
print('Отсортированный список:', a)  # [1000, 99, 45, 34, 12, 9, 8, 7, 6, 1, 0, -2, -3, -67]

# Примечание 1. С помощью метода sort() можно сортировать списки содержащие не только числа, но и строки.
# В таком случае элементы списка сортируются в соответствии с лексикографическим порядком.
a = ['бета', 'альфа', 'дельта', 'гамма']
a.sort()
print ('Отсортированный список:', a)  # ['альфа', 'бета', 'гамма', 'дельта']

# Примечание 2. Метод sort() использует алгоритм Timsort
