# Основы работы со списками
# Работа со списками очень сильно напоминает работу со строками, поскольку и списки, и строки содержат
# отдельные элементы: элементы списка могут иметь произвольный тип, а элементами строк всегда являются символы.

# Функция len()
# Длиной списка называется количество его элементов. Для того, чтобы посчитать длину списка мы используем встроенную
# функцию len() (от слова length – длина).
numbers = [2, 4, 6, 8, 10]
languages = ['Python', 'C#', 'C++', 'Java']
print(len(numbers))      # 5 | выводим длину списка numbers
print(len(languages))    # 4 | выводим длину списка languages
print(len(['apple', 'banana', 'cherry']))   # 3 | выводим длину списка, состоящего из 3 элементов

# Оператор принадлежности in
# Оператор in позволяет проверить, содержит ли список некоторый элемент.
numbers = [2, 4, 6, 8, 10]
if 2 in numbers:
    print('Список numbers содержит число 2')  # Список numbers содержит число 2
else:
    print('Список numbers не содержит число 2')

# Мы можем использовать оператор in вместе с логическим оператором not. Например
numbers = [2, 4, 6, 8, 10]
if 0 not in numbers:
    print('Список numbers не содержит нулей')

# Индексация
# При работе со строками мы использовали индексацию, то есть обращение к конкретному символу строки по его индексу.
# Аналогично, можно индексировать и списки.
# Для индексации списков в Python используются квадратные скобки [], в которых указывается индекс (номер)
# нужного элемента в списке.

# Срезы
# С помощью среза мы можем получить несколько элементов списка, создав диапазон индексов разделенных двоеточием
# numbers[x:y].
numbers = [2, 4, 6, 8, 10]
print(numbers[1:3])  # [4, 6]
print(numbers[2:5])  # [6, 8, 10]

# При построении среза numbers[x:y] первое число – это то место, где начинается срез (включительно),
# а второе – это место, где заканчивается срез (невключительно). Разрезая списки, мы создаем новые списки, по сути,
# подсписки исходного.

# При использовании срезов со списками мы также можем опускать второй параметр в срезе numbers[x:]
# (но поставить двоеточие), тогда срез берется до конца списка. Аналогично если опустить первый параметр numbers[:y],
# то можно взять срез от начала списка.

# Использование срезов для изменения элементов в заданном диапазоне
# Для изменения целого диапазона элементов списка можно использовать срезы. Например, если мы хотим перевести
# на русский язык названия фруктов 'banana', 'cherry', 'kiwi', то это можно сделать с помощью среза.
fruits = ['apple', 'apricot', 'banana', 'cherry', 'kiwi', 'lemon', 'mango']
fruits[2:5] = ['банан', 'вишня', 'киви']
print(fruits)  # ['apple', 'apricot', 'банан', 'вишня', 'киви', 'lemon', 'mango']

# Операция конкатенации + и умножения на число *
# Мы можем применять операторы + и * для списков подобно тому как мы это делали со строками.
print([1, 2, 3, 4] + [5, 6, 7, 8])  # [1, 2, 3, 4, 5, 6, 7, 8]
print([7, 8] * 3)                   # [7, 8, 7, 8, 7, 8]
print([0] * 10)                     # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Для генерации списков, состоящих строго из повторяющихся элементов,
# умножение на число — самый короткий и правильный метод.

# Мы также можем использовать расширенные операторы += и *= при работе со списками.
a = [1, 2, 3, 4]
b = [7, 8]
a += b    # добавляем к списку a список b
b *= 5    # повторяем список b 5 раз
print(a)  # [1, 2, 3, 4, 7, 8]
print(b)  # [7, 8, 7, 8, 7, 8, 7, 8, 7, 8]

# Встроенные функции sum(), min(), max()
# Встроенная функция sum() принимает в качестве параметра список чисел и вычисляет сумму его элементов.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print('Сумма всех элементов списка =', sum(numbers))  # Сумма всех элементов списка = 55

# Встроенные функции min() и max() принимают в качестве параметра список и находят минимальный
# и максимальный элементы соответственно.
numbers = [3, 4, 10, 3333, 12, -7, -5, 4]
print('Минимальный элемент =', min(numbers))   # Минимальный элемент = -7
print('Максимальный элемент =', max(numbers))  # Максимальный элемент = 3333

# Отличие списков от строк
# Несмотря на всю схожесть списков и строк, есть одно очень важное отличие: строки — неизменяемые объекты,
# а списки – изменяемые.
numbers = [1, 2, 3, 4, 5, 6, 7]
numbers[1] = 101  # изменяем 2 элемент (по индексу 1) списка
print(numbers)    # [1, 101, 3, 4, 5, 6, 7]
