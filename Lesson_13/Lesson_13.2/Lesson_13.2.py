# Функции с параметрами
# В предыдущем уроке мы определили функцию draw_box(), которая выводит звездный прямоугольник с размерами 5 \times 75×7:
def draw_box():
    for i in range(5):
        print('*' * 7)

# Было бы намного удобнее, если бы функция draw_box() выводила прямоугольник с произвольными размерами. И действительно,
# функции могут принимать входные параметры, что делает их более гибкими.

# Функции с параметрами объявляются так же как функции без параметров, только с указанием в скобках:
# def название_функции(параметры):
#     блок_кода

# Давайте перепишем предыдущую версию функции draw_box() так, чтобы она принимала параметры, задающие высоту и ширину прямоугольника:
def draw_box(height, width):    # функция принимает два параметра
    for i in range(height):
        print('*' * width)

# Теперь наша функция draw_box() принимает два целочисленных параметра height – высота прямоугольника и width – ширина
# прямоугольника, и для ее вызова нам нужно обязательно их указать.
# Чтобы вывести звездный прямоугольник размерами 5 на 7 мы пишем код:
draw_box(5, 7)

# Чтобы вывести прямоугольник размерами 10 на 15, мы пишем код:
draw_box(10, 15)


# Параметры VS аргументы
# Аргумент – это любая порция данных, которая передается в функцию, когда функция вызывается. Параметр – это переменная,
# которая получает аргумент, переданный в функцию.
# Для функции draw_box(height, width):
def draw_box(height, width):
    for i in range(height):
        print('*' * width)

# параметрами являются переменные height и width.
# В момент вызова функции draw_box(height, width):
height = 10
draw_box(height, 9)
# аргументами являются height и 9.

# Внесение изменений в параметры
# Когда аргумент передается в функцию, параметрическая переменная функции будет ссылаться на значение этого аргумента.
# Однако любые изменения, которые вносятся в параметрическую переменную, не будут влиять на аргумент.
def draw_box(height, width):
    height = 2
    width = 10
    for i in range(height):
        print('*' * width)
n = 5
m = 7
draw_box(n, m)
print(n, m)     # 5 7
