# Локальные переменные
# Локальными называются переменные, объявленные внутри функции и доступные только ей самой. Программный код за пределами
# функции к ним доступа не имеет.
def print_texas():
    birds = 5000
    print('В Техасе обитает', birds, 'птиц.')

# Всякий раз, когда переменной внутри функции присваивается значение, в результате создается локальная переменная.
# Она принадлежит функции, в которой создается, и к ней получает доступ только программный код этой функции.

# Термин “локальная” указывает на то, что переменная может использоваться лишь в этом месте — внутри функции,
# в которой создается.

# Если программный код одной функции попытается обратиться к локальной переменной, принадлежащей другой функции,
# произойдет ошибка.
def print_texas():
    birds = 5000
    print('В Техасе обитает', birds, 'птиц.')

# def print_california():
#     print('В Калифорнии обитает', birds, 'птиц.')  # NameError: name 'birds' is not defined

# Локальные переменные скрыты от других функций, поэтому другие функции могут иметь собственные локальные переменные
# с тем же именем.
def print_texas():
    birds = 5000
    print('В Техасе обитает', birds, 'птиц.')

def print_california():
    birds = 9000
    print('В Калифорнии обитает', birds, 'птиц.')

# В каждой из этих двух функций есть локальная переменная с именем birds. Но они никогда не видны одновременно,
# так как находятся в разных функциях.

# Область действия переменной
# Область действия переменной – часть программы, в которой можно к ней обращаться, та функция, где она создана.
# Переменная видима только программному коду в области ее действия. Никакая инструкция за пределами функции не может
# обращаться к такой переменной.

# К локальной переменной не может обращаться программный код, который появляется внутри функции до того,
# как переменная была создана.
# def print_texas():
#     print('В Техасе обитает', birds, 'птиц.')  # UnboundLocalError: local variable 'birds' referenced before assignment
#     birds = 5000

# Область действия параметрической переменной
# Область действия параметрической переменной — функция, в которой этот параметр используется. К параметрической
# переменной имеет доступ весь программный код этой функции.
def draw_box(height, width):
    for i in range(height):
        print('*' * width)
# Параметрические переменные тут height, width. Внутри функции объявляется одна локальная переменная i.

# Глобальные переменные
# Глобальными называются переменные, объявленные в основной программе и доступные как программе, так и всем ее функциям.
birds = 5000    # глобальная переменная
def print_texas():
    print('В Техасе обитает', birds, 'птиц.')

def print_california():
    print('В Калифорнии обитает', birds, 'птиц.')

print_texas()       # В Техасе обитает 5000 птиц.
print_california()  # В Калифорнии обитает 5000 птиц.

# Обмен информацией между основной программой и функциями осуществляется только с помощью параметров функций и
# глобальных переменных.

# Функция может использовать любые глобальные переменные кроме имеющих те же имена, что и ее локальные переменные.
# Если в функции объявлена локальная переменная с тем же именем, что у одной из глобальных, то данная глобальная
# переменная становится недоступной в этой функции, и при указании идентификатора переменной произойдет обращение к
# локальной переменной функции, а не одноименной глобальной.
birds = 5000   # глобальная переменная
def print_texas():
    birds = 1000  # локальная переменная
    print('В Техасе обитает', birds, 'птиц.')

def print_california():
    birds = 7000  # локальная переменная
    print('В Калифорнии обитает', birds, 'птиц.')

print_texas()       # В Техасе обитает 1000 птиц.
print_california()  # В Калифорнии обитает 7000 птиц.

# Глобальные переменные – зло
# Большинство программистов согласны, что следует ограничить использование глобальных переменных
# либо не использовать их вообще.
#
# Причины следующие.
#   1. Глобальные переменные затрудняют отладку программы. Значение глобальной переменной может быть изменено любой
#       инструкцией в программном файле. Если обнаружится, что в глобальной переменной хранится неверное значение,
#       то придется отыскать все инструкции, которые к ней обращаются, чтобы определить, откуда поступает плохое
#       значение. В программе с тысячами строк кода сделать это непросто.
#   2. Функции, использующие глобальные переменные, обычно зависят от этих переменных. Если возникнет необходимость
#       применить такую функцию в другой программе, скорее всего придется эту функцию перепроектировать,
#       чтобы она не опиралась на глобальную переменную.
#   3. Глобальные переменные затрудняют понимание программы. Глобальная переменная может быть модифицирована любой
#       инструкцией в программе. При необходимости разобраться в какой-то части программы, использующей глобальную
#       переменную, придется узнать обо всех других частях программы, обращающихся к этой глобальной переменной.

# В большинстве случаев следует создавать переменные локально и передавать их в качестве аргументов в функции,
# которым нужно к ним обратиться.

# Глобальные константы
# Хотя следует избегать использования глобальных переменных, в программе допускается применение глобальных констант.
# Глобальная константа – глобальное имя, ссылающееся на неизменное значение. Поскольку значение глобальной константы
# не может быть изменено во время исполнения программы, можно не беспокоиться о потенциальных опасностях,
# обычно связанных с использованием глобальных переменных.

# Несмотря на то, что язык Python не позволяет создавать настоящие глобальные константы, их можно имитировать при помощи
# глобальных переменных. Если глобальная переменная не объявляется с использованием ключевого слова global внутри
# функции, то присвоенное ей значение невозможно изменить внутри этой функции.

# Ключевое слово global
# Если нужно, чтобы инструкция внутри функции присваивала значение глобальной переменной, то требуется дополнительный
# шаг. В этом случае, глобальная переменная должна быть объявлена внутри функции.
def print_texas():
    global birds
    birds = 5000
    print('В Техасе обитает', birds, 'птиц.')

def print_california():
    print('В Калифорнии обитает', birds, 'птиц.')

print_texas()       # В Техасе обитает 5000 птиц.
print_california()  # В Калифорнии обитает 5000 птиц.
