# Функции с возвратом нескольких значений
# В Python функции не ограничены возвратом всего одного значения. После инструкции return можно определить много
# выражений, разделенных запятыми:
#   return выражение 1, выражение 2, выражение 3 ...

# Следующий программный код определяет функцию get_powers(num), которая принимает в качестве аргумента число num и
# возвращает его квадрат, куб и четвертую степень.
def get_powers(num):
    return num**2, num**3, num**4

a, b, c = get_powers(2)
print(a)  # 4
print(b)  # 8
print(c)  # 16

# Возвращающие несколько значений функции – исключительная особенность языка Python. В большинстве языков
# программирования для возврата нескольких значений используется результирующий тип данных – список, который может
# содержать несколько значений.

# Рассмотрим еще один пример. Пусть требуется написать функцию, которая находит точку пересечения двух непараллельных
# прямых ax+by=e и cx+dy=f. Другими словами требуется решить систему уравнений:
def solve(a, b, c, d, e, f):
    x = (d * e - b * f)/(a * d - b * c)
    y = (a * f - c * e)/(a * d - b * c)
    return x, y

xsol, ysol = solve(2, 3, 4, 1, 2, 5)
print('Решением системы являются числа', 'x =', xsol, 'y =', ysol)  # x = 1.3 y = -0.2


# Преимущества использования функций
# Разбивая программы на функции получаем:
#     Более простой код. Разбитый на функции код программы проще и легче для понимания. Несколько небольших функций
#       намного легче читать, чем одну длинную последовательность инструкций;
#     Повторное использование кода. Функции позволяют избежать многократного повторения кода в программе. Если какая-то
#       операция в программе выполняется в нескольких местах, то можно один раз написать для нее функцию и затем
#       исполнять ее, когда понадобится.
#     Более простое тестирование.  Когда каждая задача в программе содержится в собственной функции, программисты могут
#       индивидуально протестировать каждую функцию и определить, выполняет ли она свою задачу правильно.
#     Более быстрая разработка. Предположим, что программист или команда программистов разрабатывает много программ.
#       Они обнаруживают общие задачи у разных программ, например выяснение имени пользователя и пароля, вывод текущего
#       времени. Каждый раз писать программный код для этих задач не имеет смысла. Для часто встречающихся задач пишут
#       функции, и включают в состав любой нуждающейся в них программы.
#     Упрощение командной работы. Когда программа разрабатывается как набор функций, разным программистам можно поручить
#     написание отдельных функций.

# Что выделять в функции?
# В функцию можно выделить любой законченный фрагмент программы. Можно ориентироваться на рекомендации:
#     Когда несколько раз пишете в программе одну и ту же последовательность команд, необходимость введения функции
#       приобретает характер острой внутренней потребности;
#     Иногда обилие мелочей заслоняет главное и полезно убрать в функцию подробности, скрывающие смысл основной
#       программы;
#     Полезно разбить длинную программу на составные части, как книгу разбивают на главы, при этом основная программа
#       становится похожей на оглавление;
#     Сложные частные алгоритмы бывает полезно отладить отдельно в небольших тестирующих программах. Включить их в
#       основную программу будет легко, если они оформлены в виде функций. Например, функций сортировок;
#     Сделанное хорошо в одной программе, хочется перенести в новые. Для повторного использования лучше сразу выделять в
#       программе полезные алгоритмы в отдельные функции, а функции собирать в пакеты.
