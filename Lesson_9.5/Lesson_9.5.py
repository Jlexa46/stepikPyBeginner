# Классификация символов
# Методы в этой группе классифицируют строку на основе содержащихся в ней символов.

# Метод isalnum() определяет, состоит ли исходная строка из буквенно-цифровых символов.
# Метод возвращает значение True если исходная строка является непустой и состоит
# только из буквенно-цифровых символов и False в противном случае.
s1 = 'abc123'
s2 = 'abc$*123'
s3 = ''
print(s1.isalnum())  # True
print(s2.isalnum())  # False
print(s3.isalnum())  # False

# Метод isalpha() определяет, состоит ли исходная строка из буквенных символов.
# Метод возвращает значение True если исходная строка является непустой и состоит только из буквенных символов
# и False в противном случае.
s1 = 'ABCabc'
s2 = 'abc123'
s3 = ''
print(s1.isalpha())  # True
print(s2.isalpha())  # False
print(s3.isalpha())  # False

# Метод isdigit() определяет, состоит ли исходная строка только из цифровых символов.
# Метод возвращает значение True если исходная строка является непустой и состоит только из цифровых символов
# и False в противном случае.
s1 = '1234567'
s2 = 'abc123'
s3 = ''
print(s1.isdigit())  # True
print(s2.isdigit())  # False
print(s3.isdigit())  # False

# Метод islower() определяет, являются ли все буквенные символы исходной строки строчными (имеют нижний регистр).
# Метод возвращает значение True если все буквенные символы исходной строки являются строчными и False в противном случае.
# Все неалфавитные символы игнорируются!
s1 = 'abc'
s2 = 'abc1$d'
s3 = 'Abc1$D'
print(s1.islower())  # True
print(s2.islower())  # True
print(s3.islower())  # False

# Метод isupper() определяет, являются ли все буквенные символы исходной строки заглавными (имеют верхний регистр).
# Метод возвращает значение True если все буквенные символы исходной строки являются заглавными и False в противном случае.
# Все неалфавитные символы игнорируются!
s1 = 'ABC'
s2 = 'ABC1$D'
s3 = 'Abc1$D'
print(s1.isupper())  # True
print(s2.isupper())  # True
print(s3.isupper())  # False

# Метод isspace() определяет, состоит ли исходная строка только из пробельных символов.
# Метод возвращает значение True если строка состоит только из пробельных символов и False в противном случае.
s1 = '       '
s2 = 'abc1$d'
print(s1.isspace())  # True
print(s2.isspace())  # False


# Форматирование строк
# Хранить строки в переменных удобно, но часто бывает необходимо собирать строки из других объектов (строк, чисел и т.д.)
# и выполнять с ними нужные манипуляции. Для этой цели можно воспользоваться механизмом форматирования строк.
age = 27
txt = 'My name is Timur, I am {}'.format(age)
print(txt)

# Мы передаем необходимые параметры методу format, а Python форматирует указанную строку и помещает их в строку
# на место заполнителей {}. Мы можем создавать сколько угодно заполнителей в строке:
age = 27
name = 'Timur'
profession = 'math teacher'
txt = 'My name is {}, I am {}, I work as a {}'.format(name, age, profession)
print(txt)

# Для наглядности и гибкости форматирования мы можем использовать порядковый номер в заполнителе: {0}, {1}, {2},....
# Такой номер определяет позицию параметра, переданного методу format (нумерация начинается с нуля):
age = 27
name = 'Timur'
profession = 'math teacher'
txt = 'My name is {0}, I am {1}, I work as a {2}'.format(name, age, profession)
print(txt)

name = 'Timur'
txt = 'My name is {0}-{0}-{0}'.format(name)
print(txt)  # My name is Timur-Timur-Timur

# Метод format хорошо справляется с задачей форматирования строк, однако если параметров много,
# то код может показаться немного избыточным:
first_name = 'Timur'
last_name = 'Guev'
age = 27
profession = 'math teacher'
affiliation = 'BeeGeek'
print('Hello, {0} {1}. You are {2}. You are a {3}. You were a member of {4}'
      .format(first_name, last_name, age, profession, affiliation))

# В Python 3.6 появилась новая разновидность строк — так называемые f-строки. Если поставить перед строкой префикс f,
# в заполнители можно будет включить код, например имя переменной. Предыдущий код можно записать в виде:
first_name = 'Timur'
last_name = 'Guev'
age = 27
profession = 'math teacher'
affiliation = 'BeeGeek'
print(f'Hello, {first_name} {last_name}. You are {age}. You are a {profession}. You were a member of {affiliation}')
